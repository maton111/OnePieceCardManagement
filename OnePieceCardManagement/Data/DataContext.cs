// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using OnePieceCardManagement.Models;

namespace OnePieceCardManagement.Data;

public partial class DataContext : DbContext
{
    public DataContext() : base()
    {
    }

    public DataContext(DbContextOptions<DataContext> options)
        : base(options)
    {
    }

    public virtual DbSet<RefreshToken> RefreshTokens { get; set; }

    public virtual DbSet<TattooPositions> TattooPositions { get; set; }

    public virtual DbSet<TattooStatistics> TattooStatistics { get; set; }

    public virtual DbSet<TattooStyles> TattooStyles { get; set; }

    public virtual DbSet<Tattoos> Tattoos { get; set; }

    public virtual DbSet<TattoosByPosition> TattoosByPosition { get; set; }

    public virtual DbSet<TattoosByStyle> TattoosByStyle { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TattooPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tattoo_positions_pkey");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<TattooStatistics>(entity =>
        {
            entity.ToView("tattoo_statistics");
        });

        modelBuilder.Entity<TattooStyles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tattoo_styles_pkey");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<Tattoos>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tattoos_pkey");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<TattoosByPosition>(entity =>
        {
            entity.ToView("tattoos_by_position");
        });

        modelBuilder.Entity<TattoosByStyle>(entity =>
        {
            entity.ToView("tattoos_by_style");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}